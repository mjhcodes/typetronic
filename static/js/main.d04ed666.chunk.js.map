{"version":3,"sources":["hooks/useWordGame.js","App.js","index.js"],"names":["useWordGame","startingTime","useState","text","setText","timeRemaining","setTimeRemaining","isTimeRunning","setIsTimeRunning","wordCount","setWordCount","textBoxRef","useRef","useEffect","setTimeout","time","trim","split","filter","word","length","calculateWordCount","handleChange","e","value","target","startGame","current","disabled","focus","App","ref","onChange","onClick","ReactDOM","render","document","getElementById"],"mappings":"2JAqDeA,MAnDf,WAAyC,IAApBC,EAAmB,uDAAJ,GAAI,EACdC,mBAAS,IADK,mBAC/BC,EAD+B,KACzBC,EADyB,OAEIF,mBAASD,GAFb,mBAE/BI,EAF+B,KAEhBC,EAFgB,OAGIJ,oBAAS,GAHb,mBAG/BK,EAH+B,KAGhBC,EAHgB,OAIJN,mBAAS,GAJL,mBAI/BO,EAJ+B,KAIpBC,EAJoB,KAKhCC,EAAaC,iBAAO,MAmC1B,OAVAC,qBAAU,WACJN,GAAiBF,EAAgB,EACnCS,YAAW,WACTR,GAAiB,SAAAS,GAAI,OAAIA,EAAO,OAC/B,KACwB,IAAlBV,IATXG,GAAiB,GACjBE,EAfF,SAA4BP,GAE1B,OADiBA,EAAKa,OAAOC,MAAM,KACnBC,QAAO,SAAAC,GAAI,MAAa,KAATA,KAAaC,OAa/BC,CAAmBlB,OAW/B,CAACE,EAAeE,IAEZ,CACLI,aACAW,aAnCF,SAAsBC,GAAI,IAChBC,EAAUD,EAAEE,OAAZD,MACRpB,EAAQoB,IAkCRrB,OACAI,gBACAF,gBACAqB,UA7BF,WACElB,GAAiB,GACjBF,EAAiBL,GACjBG,EAAQ,IACRO,EAAWgB,QAAQC,UAAW,EAC9BjB,EAAWgB,QAAQE,SAyBnBpB,cCjBWqB,MA7Bf,WAAgB,IAAD,EAST9B,IAPFW,EAFW,EAEXA,WACAW,EAHW,EAGXA,aACAnB,EAJW,EAIXA,KACAI,EALW,EAKXA,cACAF,EANW,EAMXA,cACAqB,EAPW,EAOXA,UACAjB,EARW,EAQXA,UAGF,OACE,6BACE,qDACA,8BACEsB,IAAKpB,EACLqB,SAAUV,EACVE,MAAOrB,EACPyB,UAAWrB,IAEb,+CAAqBF,GACrB,4BAAQ4B,QAASP,EAAWE,SAAUrB,GAAtC,SAGA,2CAAiBE,K,KCpBvByB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.d04ed666.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\nfunction useWordGame(startingTime = 10) {\n  const [text, setText] = useState(\"\");\n  const [timeRemaining, setTimeRemaining] = useState(startingTime);\n  const [isTimeRunning, setIsTimeRunning] = useState(false);\n  const [wordCount, setWordCount] = useState(0);\n  const textBoxRef = useRef(null);\n\n  function handleChange(e) {\n    const { value } = e.target;\n    setText(value);\n  }\n\n  function calculateWordCount(text) {\n    const wordsArr = text.trim().split(\" \");\n    return wordsArr.filter(word => word !== \"\").length;\n  }\n\n  function startGame() {\n    setIsTimeRunning(true);\n    setTimeRemaining(startingTime);\n    setText(\"\");\n    textBoxRef.current.disabled = false;\n    textBoxRef.current.focus();\n  }\n\n  function endGame() {\n    setIsTimeRunning(false);\n    setWordCount(calculateWordCount(text));\n  }\n\n  useEffect(() => {\n    if (isTimeRunning && timeRemaining > 0) {\n      setTimeout(() => {\n        setTimeRemaining(time => time - 1);\n      }, 1000);\n    } else if (timeRemaining === 0) {\n      endGame();\n    }\n  }, [timeRemaining, isTimeRunning]);\n\n  return {\n    textBoxRef,\n    handleChange,\n    text,\n    isTimeRunning,\n    timeRemaining,\n    startGame,\n    wordCount,\n  };\n}\n\nexport default useWordGame;\n","import React from \"react\";\nimport useWordGame from \"./hooks/useWordGame\";\n\nfunction App() {\n  const {\n    textBoxRef,\n    handleChange,\n    text,\n    isTimeRunning,\n    timeRemaining,\n    startGame,\n    wordCount,\n  } = useWordGame();\n\n  return (\n    <div>\n      <h1>How fast do you type?</h1>\n      <textarea\n        ref={textBoxRef}\n        onChange={handleChange}\n        value={text}\n        disabled={!isTimeRunning}\n      />\n      <h4>Time remaining: {timeRemaining}</h4>\n      <button onClick={startGame} disabled={isTimeRunning}>\n        Start\n      </button>\n      <h1>Word count: {wordCount}</h1>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./styles.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}